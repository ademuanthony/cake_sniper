// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPairs(t *testing.T) {
	t.Parallel()

	query := Pairs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPairsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPairsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pairs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPairsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PairSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPairsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PairExists(ctx, tx, o.Pairaddress)
	if err != nil {
		t.Errorf("Unable to check if Pair exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PairExists to return true, but got false.")
	}
}

func testPairsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pairFound, err := FindPair(ctx, tx, o.Pairaddress)
	if err != nil {
		t.Error(err)
	}

	if pairFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPairsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pairs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPairsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pairs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPairsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pairOne := &Pair{}
	pairTwo := &Pair{}
	if err = randomize.Struct(seed, pairOne, pairDBTypes, false, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}
	if err = randomize.Struct(seed, pairTwo, pairDBTypes, false, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pairOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pairTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pairs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPairsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pairOne := &Pair{}
	pairTwo := &Pair{}
	if err = randomize.Struct(seed, pairOne, pairDBTypes, false, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}
	if err = randomize.Struct(seed, pairTwo, pairDBTypes, false, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pairOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pairTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPairsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPairsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pairColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPairsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPairsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PairSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPairsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pairs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pairDBTypes = map[string]string{`Pairaddress`: `character varying`, `Token0`: `character varying`, `Token1`: `character varying`, `Router`: `character varying`, `Reserve0`: `character varying`, `Reserve1`: `character varying`, `Lastupdate`: `bigint`, `TVL`: `bigint`}
	_           = bytes.MinRead
)

func testPairsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pairPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pairAllColumns) == len(pairPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pairDBTypes, true, pairPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPairsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pairAllColumns) == len(pairPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pair{}
	if err = randomize.Struct(seed, o, pairDBTypes, true, pairColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pairDBTypes, true, pairPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pairAllColumns, pairPrimaryKeyColumns) {
		fields = pairAllColumns
	} else {
		fields = strmangle.SetComplement(
			pairAllColumns,
			pairPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PairSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPairsUpsert(t *testing.T) {
	t.Parallel()

	if len(pairAllColumns) == len(pairPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Pair{}
	if err = randomize.Struct(seed, &o, pairDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pair: %s", err)
	}

	count, err := Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pairDBTypes, false, pairPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pair struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pair: %s", err)
	}

	count, err = Pairs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
