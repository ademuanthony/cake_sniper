// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Pair is an object representing the database table.
type Pair struct {
	Pairaddress string `boil:"pairaddress" json:"pairaddress" toml:"pairaddress" yaml:"pairaddress"`
	Token0      string `boil:"token0" json:"token0" toml:"token0" yaml:"token0"`
	Token1      string `boil:"token1" json:"token1" toml:"token1" yaml:"token1"`
	Router      string `boil:"router" json:"router" toml:"router" yaml:"router"`
	Reserve0    string `boil:"reserve0" json:"reserve0" toml:"reserve0" yaml:"reserve0"`
	Reserve1    string `boil:"reserve1" json:"reserve1" toml:"reserve1" yaml:"reserve1"`
	Lastupdate  int64  `boil:"lastupdate" json:"lastupdate" toml:"lastupdate" yaml:"lastupdate"`
	TVL         int64  `boil:"tvl" json:"tvl" toml:"tvl" yaml:"tvl"`

	R *pairR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pairL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PairColumns = struct {
	Pairaddress string
	Token0      string
	Token1      string
	Router      string
	Reserve0    string
	Reserve1    string
	Lastupdate  string
	TVL         string
}{
	Pairaddress: "pairaddress",
	Token0:      "token0",
	Token1:      "token1",
	Router:      "router",
	Reserve0:    "reserve0",
	Reserve1:    "reserve1",
	Lastupdate:  "lastupdate",
	TVL:         "tvl",
}

var PairTableColumns = struct {
	Pairaddress string
	Token0      string
	Token1      string
	Router      string
	Reserve0    string
	Reserve1    string
	Lastupdate  string
	TVL         string
}{
	Pairaddress: "pair.pairaddress",
	Token0:      "pair.token0",
	Token1:      "pair.token1",
	Router:      "pair.router",
	Reserve0:    "pair.reserve0",
	Reserve1:    "pair.reserve1",
	Lastupdate:  "pair.lastupdate",
	TVL:         "pair.tvl",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PairWhere = struct {
	Pairaddress whereHelperstring
	Token0      whereHelperstring
	Token1      whereHelperstring
	Router      whereHelperstring
	Reserve0    whereHelperstring
	Reserve1    whereHelperstring
	Lastupdate  whereHelperint64
	TVL         whereHelperint64
}{
	Pairaddress: whereHelperstring{field: "\"pair\".\"pairaddress\""},
	Token0:      whereHelperstring{field: "\"pair\".\"token0\""},
	Token1:      whereHelperstring{field: "\"pair\".\"token1\""},
	Router:      whereHelperstring{field: "\"pair\".\"router\""},
	Reserve0:    whereHelperstring{field: "\"pair\".\"reserve0\""},
	Reserve1:    whereHelperstring{field: "\"pair\".\"reserve1\""},
	Lastupdate:  whereHelperint64{field: "\"pair\".\"lastupdate\""},
	TVL:         whereHelperint64{field: "\"pair\".\"tvl\""},
}

// PairRels is where relationship names are stored.
var PairRels = struct {
}{}

// pairR is where relationships are stored.
type pairR struct {
}

// NewStruct creates a new relationship struct
func (*pairR) NewStruct() *pairR {
	return &pairR{}
}

// pairL is where Load methods for each relationship are stored.
type pairL struct{}

var (
	pairAllColumns            = []string{"pairaddress", "token0", "token1", "router", "reserve0", "reserve1", "lastupdate", "tvl"}
	pairColumnsWithoutDefault = []string{"pairaddress", "token0", "token1", "router"}
	pairColumnsWithDefault    = []string{"reserve0", "reserve1", "lastupdate", "tvl"}
	pairPrimaryKeyColumns     = []string{"pairaddress"}
)

type (
	// PairSlice is an alias for a slice of pointers to Pair.
	// This should almost always be used instead of []Pair.
	PairSlice []*Pair

	pairQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pairType                 = reflect.TypeOf(&Pair{})
	pairMapping              = queries.MakeStructMapping(pairType)
	pairPrimaryKeyMapping, _ = queries.BindMapping(pairType, pairMapping, pairPrimaryKeyColumns)
	pairInsertCacheMut       sync.RWMutex
	pairInsertCache          = make(map[string]insertCache)
	pairUpdateCacheMut       sync.RWMutex
	pairUpdateCache          = make(map[string]updateCache)
	pairUpsertCacheMut       sync.RWMutex
	pairUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single pair record from the query.
func (q pairQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pair, error) {
	o := &Pair{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pair")
	}

	return o, nil
}

// All returns all Pair records from the query.
func (q pairQuery) All(ctx context.Context, exec boil.ContextExecutor) (PairSlice, error) {
	var o []*Pair

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Pair slice")
	}

	return o, nil
}

// Count returns the count of all Pair records in the query.
func (q pairQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pair rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pairQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pair exists")
	}

	return count > 0, nil
}

// Pairs retrieves all the records using an executor.
func Pairs(mods ...qm.QueryMod) pairQuery {
	mods = append(mods, qm.From("\"pair\""))
	return pairQuery{NewQuery(mods...)}
}

// FindPair retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPair(ctx context.Context, exec boil.ContextExecutor, pairaddress string, selectCols ...string) (*Pair, error) {
	pairObj := &Pair{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pair\" where \"pairaddress\"=$1", sel,
	)

	q := queries.Raw(query, pairaddress)

	err := q.Bind(ctx, exec, pairObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pair")
	}

	return pairObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pair) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pair provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(pairColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pairInsertCacheMut.RLock()
	cache, cached := pairInsertCache[key]
	pairInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pairAllColumns,
			pairColumnsWithDefault,
			pairColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pairType, pairMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pairType, pairMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pair\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pair\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pair")
	}

	if !cached {
		pairInsertCacheMut.Lock()
		pairInsertCache[key] = cache
		pairInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Pair.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pair) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	pairUpdateCacheMut.RLock()
	cache, cached := pairUpdateCache[key]
	pairUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pairAllColumns,
			pairPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pair, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pair\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pairPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pairType, pairMapping, append(wl, pairPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pair row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pair")
	}

	if !cached {
		pairUpdateCacheMut.Lock()
		pairUpdateCache[key] = cache
		pairUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pairQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pair")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PairSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pairPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pair slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pair")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pair) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pair provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(pairColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pairUpsertCacheMut.RLock()
	cache, cached := pairUpsertCache[key]
	pairUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pairAllColumns,
			pairColumnsWithDefault,
			pairColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pairAllColumns,
			pairPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pair, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pairPrimaryKeyColumns))
			copy(conflict, pairPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pair\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pairType, pairMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pairType, pairMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pair")
	}

	if !cached {
		pairUpsertCacheMut.Lock()
		pairUpsertCache[key] = cache
		pairUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Pair record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pair) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Pair provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pairPrimaryKeyMapping)
	sql := "DELETE FROM \"pair\" WHERE \"pairaddress\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pair")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pairQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pairQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pair")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PairSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pair\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pairPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pair slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pair")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pair) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPair(ctx, exec, o.Pairaddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PairSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PairSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pair\".* FROM \"pair\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pairPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PairSlice")
	}

	*o = slice

	return nil
}

// PairExists checks if the Pair row exists.
func PairExists(ctx context.Context, exec boil.ContextExecutor, pairaddress string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pair\" where \"pairaddress\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pairaddress)
	}
	row := exec.QueryRowContext(ctx, sql, pairaddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pair exists")
	}

	return exists, nil
}
